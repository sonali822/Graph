class Dijkstra_Algorithm{
    static final int  V=9;
    int minDistance(int dist[],Boolean visited[])
    {
        int min = Integer.MAX_VALUE;
        int index=-1;
        for(int i=0;i<V;i++)
        {
            if(visited[i] ==false && dist[i]<=min)
            {
                min = dist[i];
                index = i;
            }
        }
        return index;
    }
    void dijkstra(int graph[][],int src)
    {
        //output array
        int dist[] = new int[V];
        Boolean []visited = new Boolean[V];
        //initialize all distance as INFINITE and visited  as false
        for(int i=0;i<V;i++)
        {
            dist[i] = Integer.MAX_VALUE;
            visited[i] = false;
        }
        dist[src] = 0;
        //find shortest path for all vertices
        for(int vertex=0;vertex<V-1;vertex++)
        {
            //pick the minimum vertex distance from the set of vertices not yet processed
            //u is always equal to src in first iteration
            int u =minDistance(dist,visited);
            //mark the picked vertex as processed
            visited[u] = true;
            //update the value of adjacent vertices of the picked vertex
            for(int adV=0;adV<V;adV++)
            {
                //update dist[adV] only if it is not visited ,there is an edge from u to adV and the total weight of 
                //path from source to adV though u is smaller than the current value of dist[adV]
            if(!visited[adV] && graph[u][adV]!=0 && dist[u]!=Integer.MAX_VALUE && dist[u]+graph[u][adV]<dist[adV])
            {
                 dist[adV] = dist[u] + graph[u][adV]; 
            }
            }
         //print the constructed distance array
            
        }
        printSolution(dist);
    }
     void printSolution(int dist[]) 
    { 
        System.out.println("Vertex \t\t Distance from Source"); 
        for (int i = 0; i < V; i++) 
            System.out.println(i + " \t\t " + dist[i]); 
    } 
    public static void main(String[] args) 
{
 int graph[][] = new int[][] {        { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, 
                                      { 4, 0, 8, 0, 0, 0, 0, 11, 0 }, 
                                      { 0, 8, 0, 7, 0, 4, 0, 0, 2 }, 
                                      { 0, 0, 7, 0, 9, 14, 0, 0, 0 }, 
                                      { 0, 0, 0, 9, 0, 10, 0, 0, 0 }, 
                                      { 0, 0, 4, 14, 10, 0, 2, 0, 0 }, 
                                      { 0, 0, 0, 0, 0, 2, 0, 1, 6 }, 
                                      { 8, 11, 0, 0, 0, 0, 1, 0, 7 }, 
                                      { 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; 
    Dijkstra_Algorithm obj = new Dijkstra_Algorithm();
    obj.dijkstra(graph, 0);
    
}
}


output--> 

run:
Vertex 		 Distance from Source
0 		 0
1 		 4
2 		 12
3 		 19
4 		 21
5 		 11
6 		 9
7 		 8
8 		 14
BUILD SUCCESSFUL (total time: 0 seconds)
