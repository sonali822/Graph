Word Search 
Given a 2D board of letters and a word. Check if the word exists in the board. The word can be constructed from letters of adjacent cells only. ie - horizontal or vertical neighbors. The same letter cell can not be used more than once.

Input:
The first line of input contains the number of test cases T. For each test case, the first line contains 2 integers M (represents the number of rows) and N (represents the number of columns). M lines will follow, each containing N space-separated characters. The next line contains a string which denotes the given word. 

Output:
Print 1 if the word exists in the grid else print 0.

Your Task:
You don't have to take input. Complete the function WordSearch() that takes the 2D board and the word as input and returns a boolean true/false value. 

Expected Time Complexity: O(N*M*4Word_Length).
Expected Auxiliary Space: O(Word_Length).

Solution -->

class Solution {
    
    public int wordSearch(char[][] board, String word) 
    {
       
    for(int i=0;i<board.length;i++){
        for(int j=0;j<board[0].length;j++){
            if(board[i][j]==word.charAt(0)&&DFS(board,i,j,0,word)){
                return 1;
            }
                
            
        }
    }
    return 0;

    }
    private boolean DFS(char[][]board,int i,int j,int count,String word){
    if(count==word.length())return true;
    if(i == -1 || i ==board.length || j==-1 ||j==board[0].length ||board[i][j]!=word.charAt(count)){
        return false;
    }
    char temp =board[i][j];
    board[i][j] ='*';
    boolean found =DFS(board,i+1,j,count+1,word)||
                   DFS(board,i-1,j,count+1,word)||
            DFS(board,i,j+1,count+1,word)||
             DFS(board,i,j-1,count+1,word);
    board[i][j] = temp;
    return found;
}
    
    
}
