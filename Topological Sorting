Given a Directed Graph. Find any Topological Sorting of that Graph.

Input:
The first line of input takes the number of test cases then T test cases follow . Each test case contains two lines. The first  line of each test case  contains two integers E and V representing no of edges and the number of vertices. Then in the next line are E  pairs of integers u, v representing an edge from u to v in the graph.

Output:
For each test case output will be 1 if the topological sort is done correctly else it will be 0.

Your Task:
You don't need to read input or print anything. Your task is to complete the function topoSort() which takes the adjacency list of the Graph and the number of vertices (N) as inputs are returns an array consisting of a the vertices in Topological order. As there are multiple Topological orders possible, you may return any of them.

Expected Time Complexity: O(V + E).
Expected Auxiliary Space: O(V).

Constraints:
1 <= T <= 100
2 <= V <= 104
1 <= E <= (N*(N-1))/2
0 <= u, v <= N-1
Graph doesn't contain multiple edges, self loops and cycles.
Graph may be disconnected.

Example:
Input
2
6 6
5 0 5 2 2 3 4 0 4 1 1 3
3 4
3 0 1 0 2 0

Output:
1
1

Explanation:
Testcase 1: The output 1 denotes that the order is valid.  So, if you have implemented your function correctly, then output would be 1 for all test cases.

Company Tags
 Accolite Amazon Flipkart Microsoft Moonfrog Labs Morgan Stanley OYO Rooms Samsung Visa
 
 
 Solution-------------------------------------------
 
 
 // A Java program to print topological 
// sorting of a DAG 
import java.io.*; 
import java.util.*; 
	
// This class represents a directed graph 
// using adjacency list representation 
class Graph 
{ 
// No. of vertices 
	private int V; 

	// Adjacency List as ArrayList of ArrayList's 
	private ArrayList<ArrayList<Integer>> adj; 
	
	//Constructor 
	Graph(int v) 
	{ 
		V = v; 
		adj = new ArrayList<ArrayList<Integer>>(v); 
		for (int i=0; i<v; ++i) 
			adj.add(new ArrayList<Integer>()); 
	} 
	
	// Function to add an edge into the graph 
	void addEdge(int v,int w) { adj.get(v).add(w); } 
	
	// A recursive function used by topologicalSort 
	void topologicalSortUtil( 
int v, boolean visited[], 
							Stack<Integer> stack) 
	{ 
		// Mark the current node as visited. 
		visited[v] = true; 
		Integer i; 
	
		// Recur for all the vertices adjacent 
		// to thisvertex 
		Iterator<Integer> it = adj.get(v).iterator(); 
		while (it.hasNext()) 
		{ 
			i = it.next(); 
			if (!visited[i]) 
				topologicalSortUtil(i, visited, stack); 
		} 
	
		// Push current vertex to stack 
// which stores result 
		stack.push(new Integer(v)); 
	} 
	
	// The function to do Topological Sort. 
	// It uses recursive topologicalSortUtil() 
	void topologicalSort() 
	{ 
		Stack<Integer> stack = new Stack<Integer>(); 
	
		// Mark all the vertices as not visited 
		boolean visited[] = new boolean[V]; 
		for (int i = 0; i < V; i++) 
			visited[i] = false; 
	
		// Call the recursive helper 
// function to store 
		// Topological Sort starting 
		// from all vertices one by one 
		for (int i = 0; i < V; i++) 
			if (visited[i] == false) 
				topologicalSortUtil(i, visited, stack); 
	
		// Print contents of stack 
		while (stack.empty()==false) 
			System.out.print(stack.pop() + " "); 
	} 
	
	// Driver method 
	public static void main(String args[]) 
	{ 
		// Create a graph given in the above diagram 
		Graph g = new Graph(6); 
		g.addEdge(5, 2); 
		g.addEdge(5, 0); 
		g.addEdge(4, 0); 
		g.addEdge(4, 1); 
		g.addEdge(2, 3); 
		g.addEdge(3, 1); 
	
		System.out.println( 
"Following is a Topological " + 
						"sort of the given graph"); 
		g.topologicalSort(); 
	} 
} 
// This code is contributed by Aakash Hasija 

