class Solution {
    int count=0;
    
    public int islandPerimeter(int[][] grid) {
    for(int i=0;i<grid.length;i++)
    {
        for(int j=0;j<grid[0].length;j++)
        {
            if(grid[i][j]==1)
            {
                islandPerimeter(grid,i,j);
                //there is only one island so we break 
                break;
            }
        }
    }
        return count;   
    } 
    public void islandPerimeter(int [][]grid,int i,int j)
    {
     //base case--> there  is given  that if there is water out of grid we have to count that
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]==0)
        {
            count++;
            return;
        }
        if(grid[i][j]==-1)return;
        grid[i][j] =-1;
        islandPerimeter(grid,i-1,j);
        islandPerimeter(grid,i+1,j);
        islandPerimeter(grid,i,j-1);
           islandPerimeter(grid,i,j+1);
     
    }
}

//Time complexity is same as DFS
