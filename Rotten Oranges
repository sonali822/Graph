Given a matrix of dimension RxC where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the minimum time required to rot all oranges. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. If it is impossible to rot every orange then simply return -1.

Input:
The first line of input contains an integer T denoting the number of test cases. Each test case contains two integers R and C, where R is the number of rows and C is the number of columns in the matrix[][]. Next line contains space separated RxC elements.

Output:
Print an integer which denotes the minimum time taken to rot all the oranges (-1 if it is impossible).

User Task:
Complete the function rotOranges which takes the RxC matrix, R and C as input and returns the minimum time required to rot all oranges.

Constraints:
1 <= T <= 100
1 <= R <= 1000
1 <= C <= 1000
0 <= matrix[i][j] <= 2

Expected Time Complexity : O(r*c)

Example:
Input:
2
3 5
2 1 0 2 1 1 0 1 2 1 1 0 0 2 1
3 5
2 1 0 2 1 0 0 1 2 1 1 0 0 2 1

Output:
2
-1

Explanation:
Testcase 1:
2 | 1 | 0 | 2 | 1
1 | 0 | 1 | 2 | 1
1 | 0 | 0 | 2 | 1

Oranges at positions {0,0}, {0, 3}, {1, 3} and {2, 3} will rot oranges at {0, 1}, {1, 0}, {0, 4}, {1, 2}, {1, 4}, {2, 4}
during 1st unit time. And, during 2nd unit time, orange at {1, 0} got rotten and will rot orange at {2, 0}. 
Hence, total 2 unit of time is required to rot all oranges.


Solution -->



import java.util.LinkedList;
import java.util.Queue;
import javafx.util.Pair;


public class RottenOranges {
    static class Pair{
    int x;
    int y;
    Pair(int x,int y){
        this.x = x;
        this.y = y;
    }
    }
    public int rotten(int grid[][]){
        Queue<Pair>q = new LinkedList<>();
        int total=0,rotten=0,time=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1 || grid[i][j]==2)total++;
                if(grid[i][j]==2)q.offer(new Pair(i,j));
                
                
            }
        }
        if(total==0)return 0;
        while(!q.isEmpty()){
            int size = q.size();
            rotten = rotten+size;
            if(rotten==total)return time;
            time++;
            for(int i=0;i<size;i++){
                Pair p =q.peek();
                if(p.x+1<grid.length && grid[p.x+1][p.y]==1){
                    grid[p.x+1][p.y]=2;
                    q.offer(new Pair(p.x+1,p.y));
                }
                //
                if(p.x-1>=0 && grid[p.x-1][p.y]==1){
                    grid[p.x-1][p.y]=2;
                    q.offer(new Pair(p.x-1,p.y));
                }
                //
                if(p.y+1<grid[0].length&& grid[p.x][p.y+1]==1){
                    grid[p.x][p.y+1]=2;
                    q.offer(new Pair(p.x,p.y+1));
                }
                //
                if(p.y-1>=0&& grid[p.x][p.y-1]==1){
                    grid[p.x][p.y-1]=2;
                    q.offer(new Pair(p.x,p.y-1));
                }
                q.poll();
            }
        }
        return -1;
        
    }
    public static void main(String[] args) {
        int grid[][] = {
                    {2,1,0,2,1},
                     {1,0,1,2,1},
                     {1,0,0,2,1},
                       
        
        
                         };
        RottenOranges obj = new RottenOranges();
      int ans =   obj.rotten(grid);
        System.out.println(ans);
    }
}
